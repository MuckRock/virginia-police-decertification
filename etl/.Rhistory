### JOIN AGENCY DIRECTORY AND CERTIFIED OFFICER TABLES ###
#All certified officer agencies have a join in the directory, except one: Emory & Henry University Police Department
certified_directory_join <- certified_officers %>%
left_join(agency_directory, join_by(place_of_employment == agency_name))
### CHECK MATCHES IN PRESENT TABLE ###
# 126 unique agencies in Present
present_agencies <- present %>%
distinct(agency)
# 56 agencies that don't have a match and need to be manually crosswalked
present_join <- present_agencies %>%
anti_join(certified_directory_join, join_by(agency == place_of_employment))
### CHECK MATCHES IN PRIOR TABLE ###
# 43 unique agencies in Prior
prior_agencies <- prior %>%
distinct(agency)
# 15 agencies that don't have a match and need to be manually crosswalked
prior_join <- prior_agencies %>%
anti_join(certified_directory_join, join_by(agency == place_of_employment))
### CHECK MATCHES IN REINSTATED TABLE ###
# 35 unique agencies in Prior
reinstated_agencies <- reinstated %>%
distinct(agency)
# 13 agencies that don't have a match and need to be manually crosswalked
reinstated_join <- reinstated_agencies %>%
anti_join(certified_directory_join, join_by(agency == place_of_employment))
### EXPORT NONMATCHES TO CROSSWALK ###
write.csv(present_join, "../data/processed/unmatched_present.csv")
write.csv(prior_join, "../data/processed/unmatched_prior.csv")
write.csv(reinstated_join, "../data/processed/unmatched_reinstated.csv")
### JOIN AGENCY DIRECTORY AND CERTIFIED OFFICER TABLES ###
#All certified officer agencies have a join in the directory, except one: Emory & Henry University Police Department
certified_directory_join <- certified_officers %>%
left_join(agency_directory, join_by(place_of_employment == agency_name)) %>%
distinct(place_of_employment)
View(certified_directory_join)
write.csv(certified_directory_join, "../data/processed/directory_crosswalk.csv")
library(tidyverse)
library(here)
library(janitor)
library(readxl)
# Read tables with general info for each agency
agency_directory <- read_excel(here("data", "raw", "Criminal_Justice_Agency_Directory.xlsx")) %>%
clean_names()
certified_officers <- read_excel(here("data", "raw", "Number_of_Certified_Officers_Per_Agency.xlsx")) %>%
clean_names()
### JOIN AGENCY DIRECTORY AND CERTIFIED OFFICER TABLES ###
#All certified officer agencies have a join in the directory, except one: Emory & Henry University Police Department
certified_directory_join <- certified_officers %>%
left_join(agency_directory, join_by(place_of_employment == agency_name)) %>%
distinct(place_of_employment)
### JOIN AGENCY DIRECTORY AND CERTIFIED OFFICER TABLES ###
#All certified officer agencies have a join in the directory, except one: Emory & Henry University Police Department
certified_directory_join <- certified_officers %>%
left_join(agency_directory, join_by(place_of_employment == agency_name))
### JOIN AGENCY DIRECTORY AND CERTIFIED OFFICER TABLES ###
#All certified officer agencies have a join in the directory, except one: Emory & Henry University Police Department
certified_directory_join <- certified_officers %>%
anti_join(agency_directory, join_by(place_of_employment == agency_name))
### JOIN AGENCY DIRECTORY AND CERTIFIED OFFICER TABLES ###
#All certified officer agencies have a join in the directory, except one: Emory & Henry University Police Department
certified_directory_join <- certified_officers %>%
right_join(agency_directory, join_by(place_of_employment == agency_name))
### JOIN AGENCY DIRECTORY AND CERTIFIED OFFICER TABLES ###
#All certified officer agencies have a join in the directory, except one: Emory & Henry University Police Department
certified_directory_join <- certified_officers %>%
anti_join(agency_directory, join_by(place_of_employment == agency_name))
# Agencies that don't have a certified officer number
certified_directory_join <- certified_officers %>%
right_join(agency_directory, join_by(place_of_employment == agency_name))
# Agencies that don't have a certified officer number
certified_directory_join <- agency_directory %>%
left_join(certified_officers, join_by(agency_name == place_of_employment))
# Agencies that don't have a certified officer number
certified_directory_join <- agency_directory %>%
anti_join(certified_officers, join_by(agency_name == place_of_employment))
View(certified_directory_join)
### JOIN AGENCY DIRECTORY AND CERTIFIED OFFICER TABLES ###
#All certified officer agencies have a join in the directory, except one: Emory & Henry University Police Department
certified_directory_join <- certified_officers %>%
right_join(agency_directory, join_by(place_of_employment == agency_name))
# Agencies that don't have a certified officer number
agencies_missing_cert_num <- agency_directory %>%
anti_join(certified_officers, join_by(agency_name == place_of_employment))
write.csv(certified_directory_join, "../data/processed/directory_crosswalk.csv")
library(tidyverse)
library(here)
library(janitor)
library(readxl)
library(lubridate)
library(stringr)
### FINALIZED - 2021 TO PRESENT ###
present <- read_excel(here("data", "raw", "DCJS_Decertification_List_Apr25.xlsx"), sheet = 1) %>%
row_to_names(row_number = 2) %>%
clean_names() %>%
# Get rid of placeholder rows for years in Excel styling
filter(!if_any(first_name, is.na)) %>%
mutate(fixed_date = case_when(
# One date looks like a data entry error
decert_date == "10/04/0222" ~ as.Date("10/04/2022", format = "%m/%d/%Y"),
.default = as.Date(as.numeric(decert_date), origin = "1899-12-30")))
### FINALIZED - 2021 TO PRESENT ###
present <- read_excel(here("data", "raw", "DCJS_Decertification_List_Apr25.xlsx"), sheet = 1) %>%
row_to_names(row_number = 2) %>%
clean_names() %>%
# Get rid of placeholder rows for years in Excel styling
filter(!if_any(first_name, is.na))
View(present)
### FINALIZED - 2021 TO PRESENT ###
present <- read_excel(here("data", "raw", "DCJS_Decertification_List.xlsx"), sheet = 1) %>%
row_to_names(row_number = 2) %>%
clean_names() %>%
# Get rid of placeholder rows for years in Excel styling
filter(!if_any(first_name, is.na)) %>%
mutate(fixed_date = case_when(
# One date looks like a data entry error
decert_date == "10/04/0222" ~ as.Date("10/04/2022", format = "%m/%d/%Y"),
.default = as.Date(as.numeric(decert_date), origin = "1899-12-30")))
### FINALIZED - 2021 TO PRESENT ###
present <- read_excel(here("data", "raw", "DCJS_Decertification_List_Apr25.xlsx"), sheet = 1) %>%
row_to_names(row_number = 2) %>%
clean_names() %>%
# Get rid of placeholder rows for years in Excel styling
filter(!if_any(first_name, is.na))
View(present)
View(present)
### FINALIZED - 2021 TO PRESENT ###
present <- read_excel(here("data", "raw", "DCJS_Decertification_List_Apr25.xlsx"), sheet = 1) %>%
row_to_names(row_number = 2) %>%
clean_names() %>%
# Get rid of placeholder rows for years in Excel styling
filter(!if_any(first_name, is.na)) %>%
mutate(fixed_date = as.Date(as.numeric(decert_date), origin = "1899-12-30"))
### FINALIZED - 2021 TO PRESENT ###
present <- read_excel(here("data", "raw", "DCJS_Decertification_List_Apr25.xlsx"), sheet = 1) %>%
row_to_names(row_number = 2) %>%
clean_names() %>%
# Get rid of placeholder rows for years in Excel styling
filter(!if_any(first_name, is.na)) %>%
mutate(fixed_date = case_when(
# One date looks like a data entry error
decert_date == "10/04/0222" ~ as.Date("10/04/2022", format = "%m/%d/%Y"),
.default = as.Date(as.numeric(decert_date), origin = "1899-12-30")))
### 2020 & PRIOR
prior <- read_excel(here("data", "raw", "DCJS_Decertification_List.xlsx"), sheet = 3, range = "A1:H83") %>%
row_to_names(row_number = 1) %>%
clean_names() %>%
mutate(fixed_date = case_when(
# One date looks like a data entry error
decert_date == "11/02/20217" ~ as.Date("11/02/2017", format = "%m/%d/%Y"),
.default = as.Date(as.numeric(decert_date), origin = "1899-12-30")))
### 2020 & PRIOR
prior <- read_excel(here("data", "raw", "DCJS_Decertification_List.xlsx"), sheet = 3, range = "A1:H83") %>%
row_to_names(row_number = 1) %>%
clean_names() %>%
mutate(fixed_date = case_when(
# One date looks like a data entry error
decert_date == "11/02/20217" ~ as.Date("11/02/2017", format = "%m/%d/%Y"),
.default = as.Date(as.numeric(decert_date), origin = "1899-12-30")))
### 2020 & PRIOR
prior <- read_excel(here("data", "raw", "DCJS_Decertification_List.xlsx"), sheet = 3, range = "A1:H83") %>%
row_to_names(row_number = 1) %>%
clean_names() %>%
mutate(fixed_date = case_when(
# One date looks like a data entry error
decert_date == "11/02/20217" ~ as.Date("11/02/2017", format = "%m/%d/%Y"),
.default = as.Date(as.numeric(decert_date), origin = "1899-12-30")))
### 2020 & PRIOR
prior <- read_excel(here("data", "raw", "DCJS_Decertification_List.xlsx"), sheet = 3, range = "A1:H83") %>%
row_to_names(row_number = 1) %>%
clean_names() %>%
mutate(fixed_date = case_when(
# One date looks like a data entry error
decert_date == "11/02/20217" ~ as.Date("11/02/2017", format = "%m/%d/%Y"),
.default = as.Date(as.numeric(decert_date), origin = "1899-12-30")))
### REINSTATED - 2021 TO PRESENT
reinstated <- read_excel(here("data", "raw", "DCJS_Decertification_List.xlsx"), sheet = 4, range = "A1:G47") %>%
row_to_names(row_number = 1) %>%
clean_names() %>%
# Get rid of placeholder rows for years in Excel styling
filter(!if_any(first_name, is.na)) %>%
mutate(recert_date = parse_date_time(str_extract(status, "\\d{4}-\\d{2}-\\d{2}|\\d{2}/\\d{2}/\\d{4}|\\d{2}-\\d{2}-\\d{4}|[A-Za-z]+ \\d{1,2}, \\d{4}"), "mdy"))
### REINSTATED - 2021 TO PRESENT
reinstated <- read_excel(here("data", "raw", "DCJS_Decertification_List.xlsx"), sheet = 4, range = "A1:G47") %>%
row_to_names(row_number = 1) %>%
clean_names() %>%
# Get rid of placeholder rows for years in Excel styling
filter(!if_any(first_name, is.na)) %>%
mutate(recert_date = parse_date_time(str_extract(status, "\\d{4}-\\d{2}-\\d{2}|\\d{2}/\\d{2}/\\d{4}|\\d{2}-\\d{2}-\\d{4}|[A-Za-z]+ \\d{1,2}, \\d{4}"), "mdy"))
### REINSTATED - 2021 TO PRESENT
reinstated <- read_excel(here("data", "raw", "DCJS_Decertification_List.xlsx"), sheet = 4, range = "A1:G47") %>%
row_to_names(row_number = 1) %>%
clean_names() %>%
# Get rid of placeholder rows for years in Excel styling
filter(!if_any(first_name, is.na)) %>%
mutate(recert_date = parse_date_time(str_extract(status, "\\d{4}-\\d{2}-\\d{2}|\\d{2}/\\d{2}/\\d{4}|\\d{2}-\\d{2}-\\d{4}|[A-Za-z]+ \\d{1,2}, \\d{4}"), "mdy"))
View(reinstated)
### REINSTATED - 2021 TO PRESENT
reinstated <- read_excel(here("data", "raw", "DCJS_Decertification_List.xlsx"), sheet = 4, range = "A1:G47") %>%
row_to_names(row_number = 1) %>%
clean_names() %>%
# Get rid of placeholder rows for years in Excel styling
filter(!if_any(first_name, is.na)) %>%
mutate(recert_date = parse_date_time(str_extract(status, "\\d{4}-\\d{2}-\\d{2}|\\d{2}/\\d{2}/\\d{4}|\\d{2}-\\d{2}-\\d{4}|[A-Za-z]+ \\d{1,2}, \\d{4}"), "mdy"))
View(reinstated)
### 2020 & PRIOR
prior <- read_excel(here("data", "raw", "DCJS_Decertification_List_Apr25.xlsx"), sheet = 3, range = "A1:H83") %>%
row_to_names(row_number = 1) %>%
clean_names() %>%
mutate(fixed_date = case_when(
# One date looks like a data entry error
decert_date == "11/02/20217" ~ as.Date("11/02/2017", format = "%m/%d/%Y"),
.default = as.Date(as.numeric(decert_date), origin = "1899-12-30")))
### REINSTATED - 2021 TO PRESENT
reinstated <- read_excel(here("data", "raw", "DCJS_Decertification_List_Apr25.xlsx"), sheet = 4, range = "A1:G47") %>%
row_to_names(row_number = 1) %>%
clean_names() %>%
# Get rid of placeholder rows for years in Excel styling
filter(!if_any(first_name, is.na)) %>%
mutate(recert_date = parse_date_time(str_extract(status, "\\d{4}-\\d{2}-\\d{2}|\\d{2}/\\d{2}/\\d{4}|\\d{2}-\\d{2}-\\d{4}|[A-Za-z]+ \\d{1,2}, \\d{4}"), "mdy"))
View(reinstated)
### REINSTATED - 2021 TO PRESENT
reinstated <- read_excel(here("data", "raw", "DCJS_Decertification_List.xlsx"), sheet = 4, range = "A1:G47") %>%
row_to_names(row_number = 1) %>%
clean_names() %>%
# Get rid of placeholder rows for years in Excel styling
filter(!if_any(first_name, is.na)) %>%
mutate(recert_date = parse_date_time(str_extract(status, "\\d{4}-\\d{2}-\\d{2}|\\d{2}/\\d{2}/\\d{4}|\\d{2}-\\d{2}-\\d{4}|[A-Za-z]+ \\d{1,2}, \\d{4}"), "mdy"))
### REINSTATED - 2021 TO PRESENT
reinstated <- read_excel(here("data", "raw", "DCJS_Decertification_List_Apr25.xlsx"), sheet = 4, range = "A1:51") %>%
row_to_names(row_number = 1) %>%
clean_names() %>%
# Get rid of placeholder rows for years in Excel styling
filter(!if_any(first_name, is.na)) %>%
mutate(recert_date = parse_date_time(str_extract(status, "\\d{4}-\\d{2}-\\d{2}|\\d{2}/\\d{2}/\\d{4}|\\d{2}-\\d{2}-\\d{4}|[A-Za-z]+ \\d{1,2}, \\d{4}"), "mdy"))
### REINSTATED - 2021 TO PRESENT
reinstated <- read_excel(here("data", "raw", "DCJS_Decertification_List.xlsx"), sheet = 4, range = "A1:G47") %>%
row_to_names(row_number = 1) %>%
clean_names() %>%
# Get rid of placeholder rows for years in Excel styling
filter(!if_any(first_name, is.na)) %>%
mutate(recert_date = parse_date_time(str_extract(status, "\\d{4}-\\d{2}-\\d{2}|\\d{2}/\\d{2}/\\d{4}|\\d{2}-\\d{2}-\\d{4}|[A-Za-z]+ \\d{1,2}, \\d{4}"), "mdy"))
source("C:/Users/newsd/home/code/virginia-decertification/etl/01_clean_dates.R", echo=TRUE)
### REINSTATED - 2021 TO PRESENT
reinstated <- read_excel(here("data", "raw", "DCJS_Decertification_List_Apr25.xlsx"), sheet = 4, range = "A1:51") %>%
row_to_names(row_number = 1) %>%
clean_names()
### REINSTATED - 2021 TO PRESENT
reinstated <- read_excel(here("data", "raw", "DCJS_Decertification_List_Apr25.xlsx"), sheet = 4, range = "A1:51") %>%
row_to_names(row_number = 1) %>%
clean_names()
### REINSTATED - 2021 TO PRESENT
reinstated <- read_excel(here("data", "raw", "DCJS_Decertification_List_Apr25.xlsx"), sheet = 4, range = "A1:G51") %>%
row_to_names(row_number = 1) %>%
clean_names()
### REINSTATED - 2021 TO PRESENT
reinstated <- read_excel(here("data", "raw", "DCJS_Decertification_List_Apr25.xlsx"), sheet = 4, range = "A1:G51") %>%
row_to_names(row_number = 1) %>%
clean_names()
### REINSTATED - 2021 TO PRESENT
reinstated <- read_excel(here("data", "raw", "DCJS_Decertification_List_Apr25.xlsx"), sheet = 4, range = "A1:G51") %>%
row_to_names(row_number = 1) %>%
clean_names() %>%
# Get rid of placeholder rows for years in Excel styling
filter(!if_any(first_name, is.na)) %>%
mutate(recert_date = parse_date_time(str_extract(status, "\\d{4}-\\d{2}-\\d{2}|\\d{2}/\\d{2}/\\d{4}|\\d{2}-\\d{2}-\\d{4}|[A-Za-z]+ \\d{1,2}, \\d{4}"), "mdy"))
View(reinstated)
### REINSTATED - 2021 TO PRESENT
reinstated <- read_excel(here("data", "raw", "DCJS_Decertification_List.xlsx"), sheet = 4, range = "A1:G47") %>%
row_to_names(row_number = 1) %>%
clean_names() %>%
# Get rid of placeholder rows for years in Excel styling
filter(!if_any(first_name, is.na)) %>%
mutate(recert_date = parse_date_time(str_extract(status, "\\d{4}-\\d{2}-\\d{2}|\\d{2}/\\d{2}/\\d{4}|\\d{2}-\\d{2}-\\d{4}|[A-Za-z]+ \\d{1,2}, \\d{4}"), "mdy"))
### REINSTATED - 2021 TO PRESENT
reinstated <- read_excel(here("data", "raw", "DCJS_Decertification_List.xlsx"), sheet = 4, range = "A1:G47") %>%
row_to_names(row_number = 1) %>%
clean_names() %>%
# Get rid of placeholder rows for years in Excel styling
filter(!if_any(first_name, is.na)) %>%
mutate(recert_date = parse_date_time(str_extract(status, "\\d{4}-\\d{2}-\\d{2}|\\d{2}/\\d{2}/\\d{4}|\\d{2}-\\d{2}-\\d{4}|[A-Za-z]+ \\d{1,2}, \\d{4}"), "mdy"))
### REINSTATED - 2021 TO PRESENT
reinstated <- read_excel(here("data", "raw", "DCJS_Decertification_List_Apr25.xlsx"), sheet = 4, range = "A1:G51") %>%
row_to_names(row_number = 1) %>%
clean_names() %>%
# Get rid of placeholder rows for years in Excel styling
filter(!if_any(first_name, is.na)) %>%
mutate(recert_date = parse_date_time(str_extract(status, "\\d{4}-\\d{2}-\\d{2}|\\d{2}/\\d{2}/\\d{4}|\\d{2}-\\d{2}-\\d{4}|[A-Za-z]+ \\d{1,2}, \\d{4}"), "mdy"))
write.csv(present, "../data/processed/clean_for_analysis/present.csv")
write.csv(prior, "../data/processed/clean_for_analysis/prior.csv")
write.csv(reinstated, "../data/processed/clean_for_analysis/reinstated.csv")
library(tidyverse)
library(here)
library(janitor)
library(readxl)
# Read in data with clean dates
present <- read_csv(here("data", "processed", "present.csv"))
prior <- read_csv(here("data", "processed", "prior.csv"))
reinstated <- read_csv(here("data", "processed", "reinstated.csv"))
# Read in data with clean dates
present <- read_csv(here("data", "processed", "present.csv"))
prior <- read_csv(here("data", "processed", "prior.csv"))
reinstated <- read_csv(here("data", "processed", "reinstated.csv"))
# Read tables with general info for each agency
agency_directory <- read_excel(here("data", "raw", "Criminal_Justice_Agency_Directory.xlsx")) %>%
clean_names()
certified_officers <- read_excel(here("data", "raw", "Number_of_Certified_Officers_Per_Agency.xlsx")) %>%
clean_names()
### JOIN AGENCY DIRECTORY AND CERTIFIED OFFICER TABLES ###
#All certified officer agencies have a join in the directory, except one: Emory & Henry University Police Department
certified_directory_join <- certified_officers %>%
right_join(agency_directory, join_by(place_of_employment == agency_name))
# Agencies that don't have a certified officer number
agencies_missing_cert_num <- agency_directory %>%
anti_join(certified_officers, join_by(agency_name == place_of_employment))
### CHECK MATCHES IN PRESENT TABLE ###
# 126 unique agencies in Present
present_agencies <- present %>%
distinct(agency)
View(present_agencies)
# 56 agencies that don't have a match and need to be manually crosswalked
present_join <- present_agencies %>%
anti_join(certified_directory_join, join_by(agency == place_of_employment))
# Read in data with clean dates
present <- read_csv(here("data", "processed", "etl", "present.csv"))
prior <- read_csv(here("data", "processed", "etl", "prior.csv"))
reinstated <- read_csv(here("data", "processed", "etl", "reinstated.csv"))
# Read tables with general info for each agency
agency_directory <- read_excel(here("data", "raw", "Criminal_Justice_Agency_Directory.xlsx")) %>%
clean_names()
certified_officers <- read_excel(here("data", "raw", "Number_of_Certified_Officers_Per_Agency.xlsx")) %>%
clean_names()
### JOIN AGENCY DIRECTORY AND CERTIFIED OFFICER TABLES ###
#All certified officer agencies have a join in the directory, except one: Emory & Henry University Police Department
certified_directory_join <- certified_officers %>%
right_join(agency_directory, join_by(place_of_employment == agency_name))
# Agencies that don't have a certified officer number
agencies_missing_cert_num <- agency_directory %>%
anti_join(certified_officers, join_by(agency_name == place_of_employment))
### CHECK MATCHES IN PRESENT TABLE ###
# 126 unique agencies in Present
present_agencies <- present %>%
distinct(agency)
# 56 agencies that don't have a match and need to be manually crosswalked
present_join <- present_agencies %>%
anti_join(certified_directory_join, join_by(agency == place_of_employment))
View(present_join)
### CHECK MATCHES IN PRIOR TABLE ###
# 43 unique agencies in Prior
prior_agencies <- prior %>%
distinct(agency)
# 15 agencies that don't have a match and need to be manually crosswalked
prior_join <- prior_agencies %>%
anti_join(certified_directory_join, join_by(agency == place_of_employment))
### CHECK MATCHES IN REINSTATED TABLE ###
# 35 unique agencies in Prior
reinstated_agencies <- reinstated %>%
distinct(agency)
### CHECK MATCHES IN REINSTATED TABLE ###
# 38 unique agencies in Prior
reinstated_agencies <- reinstated %>%
distinct(agency)
# 13 agencies that don't have a match and need to be manually crosswalked
reinstated_join <- reinstated_agencies %>%
anti_join(certified_directory_join, join_by(agency == place_of_employment))
View(reinstated_join)
# 14 agencies that don't have a match and need to be manually crosswalked
reinstated_join <- reinstated_agencies %>%
anti_join(certified_directory_join, join_by(agency == place_of_employment))
### EXPORT NONMATCHES TO CROSSWALK ###
write.csv(present_join, "../data/processed/unmatched_present.csv")
write.csv(prior_join, "../data/processed/unmatched_prior.csv")
write.csv(reinstated_join, "../data/processed/unmatched_reinstated.csv")
write.csv(certified_directory_join, "../data/processed/directory_crosswalk.csv")
library(tidyverse)
library(here)
library(janitor)
library(readxl)
present_crosswalk <- read_csv(here("data", "manual", "present_crosswalk_corrections.csv"))
prior_crosswalk <- read_csv(here("data", "manual", "prior_crosswalk_corrections.csv"))
reinstated_crosswalk <- read_csv(here("data", "manual", "reinstated_crosswalk_corrections.csv"))
present <- read_csv(here("data", "processed","etl", "present.csv"))
prior <- read_csv(here("data", "processed","etl", "prior.csv"))
reinstated <- read_csv(here("data", "processed", "etl", "reinstated.csv"))
agency_directory <- read_excel(here("data", "raw", "Criminal_Justice_Agency_Directory.xlsx")) %>%
clean_names()
certified_officers <- read_excel(here("data", "raw", "Number_of_Certified_Officers_Per_Agency.xlsx")) %>%
clean_names()
present_fixed <- present %>%
left_join(present_crosswalk, join_by(agency)) %>%
mutate(agency_name = case_when(is.na(crosswalk_correction) ~ agency, .default = crosswalk_correction))
prior_fixed <- prior %>%
left_join(prior_crosswalk, join_by(agency)) %>%
mutate(agency_name = case_when(is.na(crosswalk_correction) ~ agency, .default = crosswalk_correction))
reinstated_fixed <- reinstated %>%
left_join(reinstated_crosswalk, join_by(agency)) %>%
mutate(agency_name = case_when(is.na(crosswalk_correction) ~ agency, .default = crosswalk_correction))
certified_directory_join <- certified_officers %>%
right_join(agency_directory, join_by(place_of_employment == agency_name))
View(reinstated)
### WRITE TO FOLDER FOR ANALYSIS ###
write.csv(present_fixed, "data/processed/analysis/present.csv")
getwd()
### WRITE TO FOLDER FOR ANALYSIS ###
write.csv(present_fixed, "../data/processed/analysis/present.csv")
write.csv(prior_fixed, "../data/processed/analysis/prior.csv")
write.csv(reinstated_fixed, "../data/processed/analysis/reinstated.csv")
write.csv(certified_directory_join, "../data/processed/analysis/certified_directory.csv")
library(tidyverse)
library(tidyverse)
library(here)
library(janitor)
library(readxl)
present_crosswalk <- read_csv(here("data", "manual", "present_crosswalk_corrections.csv"))
prior_crosswalk <- read_csv(here("data", "manual", "prior_crosswalk_corrections.csv"))
reinstated_crosswalk <- read_csv(here("data", "manual", "reinstated_crosswalk_corrections.csv"))
present <- read_csv(here("data", "processed","etl", "present.csv"))
prior <- read_csv(here("data", "processed","etl", "prior.csv"))
reinstated <- read_csv(here("data", "processed", "etl", "reinstated.csv"))
agency_directory <- read_excel(here("data", "raw", "Criminal_Justice_Agency_Directory.xlsx")) %>%
clean_names()
certified_officers <- read_excel(here("data", "raw", "Number_of_Certified_Officers_Per_Agency.xlsx")) %>%
clean_names()
### JOIN CROSSWALK CORRECTIONS BACK TO ORIGINAL TABLE ###
present_fixed <- present %>%
left_join(present_crosswalk, join_by(agency)) %>%
mutate(agency_name = case_when(is.na(crosswalk_correction) ~ agency, .default = crosswalk_correction))
prior_fixed <- prior %>%
left_join(prior_crosswalk, join_by(agency)) %>%
mutate(agency_name = case_when(is.na(crosswalk_correction) ~ agency, .default = crosswalk_correction))
reinstated_fixed <- reinstated %>%
left_join(reinstated_crosswalk, join_by(agency)) %>%
mutate(agency_name = case_when(is.na(crosswalk_correction) ~ agency, .default = crosswalk_correction))
certified_directory_join <- certified_officers %>%
right_join(agency_directory, join_by(place_of_employment == agency_name))
### WRITE TO FOLDER FOR ANALYSIS ###
write.csv(present_fixed, "../data/processed/analysis/present.csv")
write.csv(prior_fixed, "../data/processed/analysis/prior.csv")
write.csv(reinstated_fixed, "../data/processed/analysis/reinstated.csv")
write.csv(certified_directory_join, "../data/processed/analysis/certified_directory.csv")
prior_fixed <- prior %>%
left_join(prior_crosswalk, join_by(agency)) %>%
mutate(agency_name = case_when(is.na(crosswalk_correction) ~ agency, .default = crosswalk_correction))
library(tidyverse)
library(here)
library(janitor)
library(readxl)
present_crosswalk <- read_csv(here("data", "manual", "present_crosswalk_corrections.csv"))
prior_crosswalk <- read_csv(here("data", "manual", "prior_crosswalk_corrections.csv"))
reinstated_crosswalk <- read_csv(here("data", "manual", "reinstated_crosswalk_corrections.csv"))
present <- read_csv(here("data", "processed","etl", "present.csv"))
prior <- read_csv(here("data", "processed","etl", "prior.csv"))
reinstated <- read_csv(here("data", "processed", "etl", "reinstated.csv"))
View(present_crosswalk)
library(tidyverse)
library(here)
library(janitor)
library(readxl)
present_crosswalk <- read_csv(here("data", "manual", "present_crosswalk_corrections.csv"))
prior_crosswalk <- read_csv(here("data", "manual", "prior_crosswalk_corrections.csv"))
reinstated_crosswalk <- read_csv(here("data", "manual", "reinstated_crosswalk_corrections.csv"))
present <- read_csv(here("data", "processed","etl", "present.csv"))
prior <- read_csv(here("data", "processed","etl", "prior.csv"))
reinstated <- read_csv(here("data", "processed", "etl", "reinstated.csv"))
agency_directory <- read_excel(here("data", "raw", "Criminal_Justice_Agency_Directory.xlsx")) %>%
clean_names()
certified_officers <- read_excel(here("data", "raw", "Number_of_Certified_Officers_Per_Agency.xlsx")) %>%
clean_names()
### JOIN CROSSWALK CORRECTIONS BACK TO ORIGINAL TABLE ###
present_fixed <- present %>%
left_join(present_crosswalk, join_by(agency)) %>%
mutate(agency_name = case_when(is.na(crosswalk_correction) ~ agency, .default = crosswalk_correction))
prior_fixed <- prior %>%
left_join(prior_crosswalk, join_by(agency)) %>%
mutate(agency_name = case_when(is.na(crosswalk_correction) ~ agency, .default = crosswalk_correction))
reinstated_fixed <- reinstated %>%
left_join(reinstated_crosswalk, join_by(agency)) %>%
mutate(agency_name = case_when(is.na(crosswalk_correction) ~ agency, .default = crosswalk_correction))
certified_directory_join <- certified_officers %>%
right_join(agency_directory, join_by(place_of_employment == agency_name))
### WRITE TO FOLDER FOR ANALYSIS ###
write.csv(present_fixed, "../data/processed/analysis/present.csv")
write.csv(prior_fixed, "../data/processed/analysis/prior.csv")
write.csv(reinstated_fixed, "../data/processed/analysis/reinstated.csv")
write.csv(certified_directory_join, "../data/processed/analysis/certified_directory.csv")
View(prior_fixed)
View(present_fixed)
library(tidyverse)
library(here)
library(janitor)
library(readxl)
present_crosswalk <- read_csv(here("data", "manual", "present_crosswalk_corrections.csv"))
prior_crosswalk <- read_csv(here("data", "manual", "prior_crosswalk_corrections.csv"))
reinstated_crosswalk <- read_csv(here("data", "manual", "reinstated_crosswalk_corrections.csv"))
present <- read_csv(here("data", "processed","etl", "present.csv"))
prior <- read_csv(here("data", "processed","etl", "prior.csv"))
reinstated <- read_csv(here("data", "processed", "etl", "reinstated.csv"))
agency_directory <- read_excel(here("data", "raw", "Criminal_Justice_Agency_Directory.xlsx")) %>%
clean_names()
certified_officers <- read_excel(here("data", "raw", "Number_of_Certified_Officers_Per_Agency.xlsx")) %>%
clean_names()
View(present)
View(present)
present_fixed <- present %>%
left_join(present_crosswalk, join_by(agency)) %>%
mutate(agency_name = case_when(is.na(crosswalk_correction) ~ agency, .default = crosswalk_correction))
View(present_fixed)
present_crosswalk <- read_csv(here("data", "manual", "present_crosswalk_corrections.csv"))
present <- read_csv(here("data", "processed","etl", "present.csv"))
present_fixed <- present %>%
left_join(present_crosswalk, join_by(agency)) %>%
mutate(agency_name = case_when(is.na(crosswalk_correction) ~ agency, .default = crosswalk_correction))
View(present_fixed)

library(tidyverse)
library(here)
library(janitor)
library(readxl)
library(lubridate)
decertifications <- read_excel(here("data", "raw", "DCJS_Decertification_List.xlsx"), sheet = 1) %>%
row_to_names(row_number = 2) %>%
clean_names() %>%
# Get rid of placeholder rows for years in Excel styling
filter(!if_any(first_name, is.na)) %>%
mutate(fixed_date = case_when(
decert_date == "10/04/0222" ~ as.Date("10/04/2022", format = "%m/%d/%Y"),
.default = as.Date(as.numeric(decert_date), origin = "1899-12-30")))
View(decertifications)
### 2020 & PRIOR
prior <- read_excel(here("data", "raw", "DCJS_Decertification_List.xlsx"), sheet = 2)
### 2020 & PRIOR
prior <- read_excel(here("data", "raw", "DCJS_Decertification_List.xlsx"), sheet = 2, range = "A1:H84")
View(prior)
### 2020 & PRIOR
prior <- read_excel(here("data", "raw", "DCJS_Decertification_List.xlsx"), sheet = 2, range = "A1:H84") %>%
row_to_names(row_number = 2) %>%
clean_names() %>%
# Get rid of placeholder rows for years in Excel styling
filter(!if_any(first_name, is.na))
### 2020 & PRIOR
prior <- read_excel(here("data", "raw", "DCJS_Decertification_List.xlsx"), sheet = 2, range = "A1:H84") %>%
row_to_names(row_number = 1) %>%
clean_names() %>%
# Get rid of placeholder rows for years in Excel styling
filter(!if_any(first_name, is.na))
### 2020 & PRIOR
prior <- read_excel(here("data", "raw", "DCJS_Decertification_List.xlsx"), sheet = 3, range = "A1:H84")
View(prior)
### 2020 & PRIOR
prior <- read_excel(here("data", "raw", "DCJS_Decertification_List.xlsx"), sheet = 3, range = "A1:H84") %>%
row_to_names(row_number = 1) %>%
clean_names() %>%
# Get rid of placeholder rows for years in Excel styling
filter(!if_any(first_name, is.na))
### 2020 & PRIOR
prior <- read_excel(here("data", "raw", "DCJS_Decertification_List.xlsx"), sheet = 3, range = "A1:H84")
### 2020 & PRIOR
prior <- read_excel(here("data", "raw", "DCJS_Decertification_List.xlsx"), sheet = 3, range = "A1:H84") %>%
row_to_names(row_number = 1) %>%
clean_names()
### 2020 & PRIOR
prior <- read_excel(here("data", "raw", "DCJS_Decertification_List.xlsx"), sheet = 3, range = "A1:H83") %>%
row_to_names(row_number = 1) %>%
clean_names()
### 2020 & PRIOR
prior <- read_excel(here("data", "raw", "DCJS_Decertification_List.xlsx"), sheet = 3, range = "A1:H83") %>%
row_to_names(row_number = 1) %>%
clean_names() %>%
mutate(fixed_date = case_when(
# One date looks like a data entry error
decert_date == "11/02/20217" ~ as.Date("11/02/2017", format = "%m/%d/%Y"),
.default = as.Date(as.numeric(decert_date), origin = "1899-12-30")))
### REINSTATED - 2021 TO PRESENT
reinstated <- read_excel(here("data", "raw", "DCJS_Decertification_List.xlsx"), sheet = 3, range = "A1:G47") %>%
row_to_names(row_number = 1) %>%
clean_names()
View(reinstated)
### REINSTATED - 2021 TO PRESENT
reinstated <- read_excel(here("data", "raw", "DCJS_Decertification_List.xlsx"), sheet = 4, range = "A1:G47") %>%
row_to_names(row_number = 1) %>%
clean_names()
### REINSTATED - 2021 TO PRESENT
reinstated <- read_excel(here("data", "raw", "DCJS_Decertification_List.xlsx"), sheet = 4, range = "A1:G47") %>%
row_to_names(row_number = 1) %>%
clean_names() %>%
# Get rid of placeholder rows for years in Excel styling
filter(!if_any(first_name, is.na))
library(stringr)
### REINSTATED - 2021 TO PRESENT
reinstated <- read_excel(here("data", "raw", "DCJS_Decertification_List.xlsx"), sheet = 4, range = "A1:G47") %>%
row_to_names(row_number = 1) %>%
clean_names() %>%
# Get rid of placeholder rows for years in Excel styling
filter(!if_any(first_name, is.na)) %>%
mutate(recert_date = str_extract(status, "\\d{4}-\\d{2}-\\d{2}|\\d{2}/\\d{2}/\\d{4}|[A-Za-z]+ \\d{1,2}, \\d{4}"))
### REINSTATED - 2021 TO PRESENT
reinstated <- read_excel(here("data", "raw", "DCJS_Decertification_List.xlsx"), sheet = 4, range = "A1:G47") %>%
row_to_names(row_number = 1) %>%
clean_names() %>%
# Get rid of placeholder rows for years in Excel styling
filter(!if_any(first_name, is.na)) %>%
mutate(recert_date = str_extract(status, "\\d{4}-\\d{2}-\\d{2}|\\d{2}/\\d{2}/\\d{4}|\\d{2}-\\d{2}-\\d{4}|[A-Za-z]+ \\d{1,2}, \\d{4}"))
### REINSTATED - 2021 TO PRESENT
reinstated <- read_excel(here("data", "raw", "DCJS_Decertification_List.xlsx"), sheet = 4, range = "A1:G47") %>%
row_to_names(row_number = 1) %>%
clean_names() %>%
# Get rid of placeholder rows for years in Excel styling
filter(!if_any(first_name, is.na)) %>%
mutate(recert_date = as_date(str_extract(status, "\\d{4}-\\d{2}-\\d{2}|\\d{2}/\\d{2}/\\d{4}|\\d{2}-\\d{2}-\\d{4}|[A-Za-z]+ \\d{1,2}, \\d{4}")))
### REINSTATED - 2021 TO PRESENT
reinstated <- read_excel(here("data", "raw", "DCJS_Decertification_List.xlsx"), sheet = 4, range = "A1:G47") %>%
row_to_names(row_number = 1) %>%
clean_names() %>%
# Get rid of placeholder rows for years in Excel styling
filter(!if_any(first_name, is.na)) %>%
mutate(recert_date = as.Date(str_extract(status, "\\d{4}-\\d{2}-\\d{2}|\\d{2}/\\d{2}/\\d{4}|\\d{2}-\\d{2}-\\d{4}|[A-Za-z]+ \\d{1,2}, \\d{4}")))
### REINSTATED - 2021 TO PRESENT
reinstated <- read_excel(here("data", "raw", "DCJS_Decertification_List.xlsx"), sheet = 4, range = "A1:G47") %>%
row_to_names(row_number = 1) %>%
clean_names() %>%
# Get rid of placeholder rows for years in Excel styling
filter(!if_any(first_name, is.na)) %>%
mutate(recert_date = str_extract(status, "\\d{4}-\\d{2}-\\d{2}|\\d{2}/\\d{2}/\\d{4}|\\d{2}-\\d{2}-\\d{4}|[A-Za-z]+ \\d{1,2}, \\d{4}")))
### REINSTATED - 2021 TO PRESENT
reinstated <- read_excel(here("data", "raw", "DCJS_Decertification_List.xlsx"), sheet = 4, range = "A1:G47") %>%
row_to_names(row_number = 1) %>%
clean_names() %>%
# Get rid of placeholder rows for years in Excel styling
filter(!if_any(first_name, is.na)) %>%
mutate(recert_date = str_extract(status, "\\d{4}-\\d{2}-\\d{2}|\\d{2}/\\d{2}/\\d{4}|\\d{2}-\\d{2}-\\d{4}|[A-Za-z]+ \\d{1,2}, \\d{4}"))
### REINSTATED - 2021 TO PRESENT
reinstated <- read_excel(here("data", "raw", "DCJS_Decertification_List.xlsx"), sheet = 4, range = "A1:G47") %>%
row_to_names(row_number = 1) %>%
clean_names() %>%
# Get rid of placeholder rows for years in Excel styling
filter(!if_any(first_name, is.na)) %>%
mutate(recert_date = parse_date_time(str_extract(status, "\\d{4}-\\d{2}-\\d{2}|\\d{2}/\\d{2}/\\d{4}|\\d{2}-\\d{2}-\\d{4}|[A-Za-z]+ \\d{1,2}, \\d{4}")), orders = c("mdy"))
### REINSTATED - 2021 TO PRESENT
reinstated <- read_excel(here("data", "raw", "DCJS_Decertification_List.xlsx"), sheet = 4, range = "A1:G47") %>%
row_to_names(row_number = 1) %>%
clean_names() %>%
# Get rid of placeholder rows for years in Excel styling
filter(!if_any(first_name, is.na)) %>%
mutate(recert_date = parse_date_time(str_extract(status, "\\d{4}-\\d{2}-\\d{2}|\\d{2}/\\d{2}/\\d{4}|\\d{2}-\\d{2}-\\d{4}|[A-Za-z]+ \\d{1,2}, \\d{4}")), "mdy")
### REINSTATED - 2021 TO PRESENT
reinstated <- read_excel(here("data", "raw", "DCJS_Decertification_List.xlsx"), sheet = 4, range = "A1:G47") %>%
row_to_names(row_number = 1) %>%
clean_names() %>%
# Get rid of placeholder rows for years in Excel styling
filter(!if_any(first_name, is.na)) %>%
mutate(recert_date = parse_date_time(str_extract(status, "\\d{4}-\\d{2}-\\d{2}|\\d{2}/\\d{2}/\\d{4}|\\d{2}-\\d{2}-\\d{4}|[A-Za-z]+ \\d{1,2}, \\d{4}"), "mdy"))
write.csv(present, "../data/processed/present.csv")
### FINALIZED - 2021 TO PRESENT ###
present <- read_excel(here("data", "raw", "DCJS_Decertification_List.xlsx"), sheet = 1) %>%
row_to_names(row_number = 2) %>%
clean_names() %>%
# Get rid of placeholder rows for years in Excel styling
filter(!if_any(first_name, is.na)) %>%
mutate(fixed_date = case_when(
# One date looks like a data entry error
decert_date == "10/04/0222" ~ as.Date("10/04/2022", format = "%m/%d/%Y"),
.default = as.Date(as.numeric(decert_date), origin = "1899-12-30")))
write.csv(present, "../data/processed/present.csv")
write.csv(prior, "../data/processed/prior.csv")
write.csv(reinstated, "../data/processed/reinstated.csv")
# Read data
present <- read_csv(here("data", "processed", "present.csv"))
# Read data
present <- read_csv(here("data", "processed", "present.csv"))
# Read data
present <- read_csv(here("data", "processed", "present.csv"))
# Read data
present <- read_csv(here("data", "processed", "present.csv"))
prior <- read_csv(here("data", "processed", "prior.csv"))
reinstated <- read_csv(here("data", "processed", "reinstated.csv"))
View(present)
present_yr <- present %>%
mutate(year = year(fixed_date)) %>%
group_by(year) %>%
summarize(num = n())
View(present_yr)
prior_yr <- prior %>%
mutate(year = year(fixed_date)) %>%
group_by(year) %>%
summarize(num = n())
reinstated_yr <- reinstated %>%
mutate(year = year(fixed_date)) %>%
group_by(year) %>%
summarize(num = n())
reinstated_yr <- reinstated %>%
mutate(year = year(recert_date)) %>%
group_by(year) %>%
summarize(num = n())
View(prior_yr)
View(reinstated)
View(reinstated_yr)
library(tidyverse)
library(here)
library(janitor)
library(readxl)
# Read in data with clean dates
present <- read_csv(here("data", "processed", "present.csv"))
prior <- read_csv(here("data", "processed", "prior.csv"))
reinstated <- read_csv(here("data", "processed", "reinstated.csv"))
# Read tables with general info for each agency
agency_directory <- read_excel(here("data", "raw", "Criminal_Justice_Agency_Directory.xlsx")) %>%
clean_names()
certified_officers <- read_excel(here("data", "raw", "Number_of_Certified_Officers_Per_Agency.xlsx")) %>%
clean_names()
### JOIN AGENCY DIRECTORY AND CERTIFIED OFFICER TABLES ###
#All certified officer agencies have a join in the directory, except one: Emory & Henry University Police Department
certified_directory_join <- certified_officers %>%
left_join(agency_directory, join_by(place_of_employment == agency_name))
### CHECK MATCHES IN PRESENT TABLE ###
# 126 unique agencies in Present
present_agencies <- present %>%
distinct(agency)
# 56 agencies that don't have a match and need to be manually crosswalked
present_join <- present_agencies %>%
anti_join(certified_directory_join, join_by(agency == place_of_employment))
### CHECK MATCHES IN PRIOR TABLE ###
# 43 unique agencies in Prior
prior_agencies <- prior %>%
distinct(agency)
# 15 agencies that don't have a match and need to be manually crosswalked
prior_join <- prior_agencies %>%
anti_join(certified_directory_join, join_by(agency == place_of_employment))
### CHECK MATCHES IN REINSTATED TABLE ###
# 35 unique agencies in Prior
reinstated_agencies <- reinstated %>%
distinct(agency)
# 13 agencies that don't have a match and need to be manually crosswalked
reinstated_join <- reinstated_agencies %>%
anti_join(certified_directory_join, join_by(agency == place_of_employment))
### EXPORT NONMATCHES TO CROSSWALK ###
write.csv(present_join, "../data/processed/unmatched_present.csv")
write.csv(prior_join, "../data/processed/unmatched_prior.csv")
write.csv(reinstated_join, "../data/processed/unmatched_reinstated.csv")
### JOIN AGENCY DIRECTORY AND CERTIFIED OFFICER TABLES ###
#All certified officer agencies have a join in the directory, except one: Emory & Henry University Police Department
certified_directory_join <- certified_officers %>%
left_join(agency_directory, join_by(place_of_employment == agency_name)) %>%
distinct(place_of_employment)
View(certified_directory_join)
write.csv(certified_directory_join, "../data/processed/directory_crosswalk.csv")
library(tidyverse)
library(here)
library(janitor)
library(readxl)
# Read tables with general info for each agency
agency_directory <- read_excel(here("data", "raw", "Criminal_Justice_Agency_Directory.xlsx")) %>%
clean_names()
certified_officers <- read_excel(here("data", "raw", "Number_of_Certified_Officers_Per_Agency.xlsx")) %>%
clean_names()
### JOIN AGENCY DIRECTORY AND CERTIFIED OFFICER TABLES ###
#All certified officer agencies have a join in the directory, except one: Emory & Henry University Police Department
certified_directory_join <- certified_officers %>%
left_join(agency_directory, join_by(place_of_employment == agency_name)) %>%
distinct(place_of_employment)
### JOIN AGENCY DIRECTORY AND CERTIFIED OFFICER TABLES ###
#All certified officer agencies have a join in the directory, except one: Emory & Henry University Police Department
certified_directory_join <- certified_officers %>%
left_join(agency_directory, join_by(place_of_employment == agency_name))
### JOIN AGENCY DIRECTORY AND CERTIFIED OFFICER TABLES ###
#All certified officer agencies have a join in the directory, except one: Emory & Henry University Police Department
certified_directory_join <- certified_officers %>%
anti_join(agency_directory, join_by(place_of_employment == agency_name))
### JOIN AGENCY DIRECTORY AND CERTIFIED OFFICER TABLES ###
#All certified officer agencies have a join in the directory, except one: Emory & Henry University Police Department
certified_directory_join <- certified_officers %>%
right_join(agency_directory, join_by(place_of_employment == agency_name))
### JOIN AGENCY DIRECTORY AND CERTIFIED OFFICER TABLES ###
#All certified officer agencies have a join in the directory, except one: Emory & Henry University Police Department
certified_directory_join <- certified_officers %>%
anti_join(agency_directory, join_by(place_of_employment == agency_name))
# Agencies that don't have a certified officer number
certified_directory_join <- certified_officers %>%
right_join(agency_directory, join_by(place_of_employment == agency_name))
# Agencies that don't have a certified officer number
certified_directory_join <- agency_directory %>%
left_join(certified_officers, join_by(agency_name == place_of_employment))
# Agencies that don't have a certified officer number
certified_directory_join <- agency_directory %>%
anti_join(certified_officers, join_by(agency_name == place_of_employment))
View(certified_directory_join)
### JOIN AGENCY DIRECTORY AND CERTIFIED OFFICER TABLES ###
#All certified officer agencies have a join in the directory, except one: Emory & Henry University Police Department
certified_directory_join <- certified_officers %>%
right_join(agency_directory, join_by(place_of_employment == agency_name))
# Agencies that don't have a certified officer number
agencies_missing_cert_num <- agency_directory %>%
anti_join(certified_officers, join_by(agency_name == place_of_employment))
write.csv(certified_directory_join, "../data/processed/directory_crosswalk.csv")
